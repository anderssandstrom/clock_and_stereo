# MACROS needed:
#  PLC_ID        : ID of this PLC
#  AX_PHYS       : Axis index for physical axis
#  AX_PHASE      : Axis index for virtual axis phase
#  AX_VELO       : Nominal velo
#  AX_ACC        : Acc and dec
#  VELO_RAMP_ENA : Enable velo ramp. Only needed for nanos

if(plc${PLC_ID}.firstscan) {
  println('State 0: trying to enable physical axis');
}

#State 0: Power physical axis and home to 0
if(static.state = 0) {  
  mc_power(${AX_PHYS},1);
}

if(ax${AX_PHYS}.drv.enabled and static.state = 0) {
  println('State 1: Home and then Move vel');
  mc_home_pos(${AX_PHYS},1,15,1,1,0);  
  static.state:=1;
}

# State 1: Start move velo ${AX_VELO}
if(static.state = 1) {
  if(${VELO_RAMP_ENA=0}) {
    # Toggle execute bit
    mc_move_vel(${AX_PHYS},0,${AX_VELO},${AX_ACC},${AX_ACC});
    mc_move_vel(${AX_PHYS},1,${AX_VELO},${AX_ACC},${AX_ACC});
  }
}

if(${VELO_RAMP_ENA=0}) {
  if(static.counter<1000 and ax${AX_PHYS}.enc.actvelo<${AX_VELO}*0.995 and ax${AX_PHYS}.enc.actvelo<${AX_VELO}*1.005) {
    static.counter:=static.counter+1;
  } else {
    static.counter:=0;
  }
} else {
  static.counter:=100;
}

# Enable phase axis to get stable setpoint
if(static.counter>=100 and static.state=1) {
  println('State 2: Power phase axis (axis ${AX_PHASE})');
  static.state:=2;
  mc_power(${AX_PHASE},1)
}

if(ax${AX_PHASE}.drv.enabled and static.state=2) {
  println('State 3: Phase axis enabled.. Change source of phys axis to ext');
  ax${AX_PHYS}.traj.source:=1;
  static.state:=3;
}

# Move to phase 0
if(static.state=3) {
  println('State 4: Move to 0 phase error');
  mc_move_abs(${AX_PHASE},0,0,${AX_VELO},${AX_ACC}, ${AX_ACC});
  mc_move_abs(${AX_PHASE},1,0,${AX_VELO},${AX_ACC}, ${AX_ACC});
  static.state:=4;
  # disable this plc
  plc${PLC_ID}.enable:=0;
}

# println('Axis ext setpoint: ', ax${AX_PHYS}.traj.extsetpos );
# println('Axis int setpoint: ', ax${AX_PHYS}.traj.setpos );
